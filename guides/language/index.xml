<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Language on Oba</title>
    <link>/guides/language/</link>
    <description>Recent content in Language on Oba</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Kendal Harland</copyright>
    <lastBuildDate>Thu, 22 Oct 2020 09:16:49 -0400</lastBuildDate><atom:link href="/guides/language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Errors</title>
      <link>/guides/language/errors/</link>
      <pubDate>Sat, 31 Oct 2020 17:22:34 -0400</pubDate>
      
      <guid>/guides/language/errors/</guid>
      <description>The native panic function can be used to halt execution in Oba. It accepts a single argument. When called, the argument is printed along with a stack trace:
panic(&amp;#34;error&amp;#34;) </description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>/guides/language/data/</link>
      <pubDate>Fri, 30 Oct 2020 10:23:58 -0400</pubDate>
      
      <guid>/guides/language/data/</guid>
      <description>Oba does not support classes in the same way that object-oriented languages do. Instead oba supports &amp;ldquo;Data types&amp;rdquo; which are sort of like Python&amp;rsquo;s named tuples. A data type has a family along with a number of named constructors for the type. For example:
data Cycle = Bicycle | Motorcycle color The above example is a simple definition of a Cycle data type family. A Cycle can be created using either of the two constructors Bicycle and Motorcycle.</description>
    </item>
    
    <item>
      <title>Pattern Matching</title>
      <link>/guides/language/pattern_matching/</link>
      <pubDate>Fri, 30 Oct 2020 10:23:58 -0400</pubDate>
      
      <guid>/guides/language/pattern_matching/</guid>
      <description>Oba supports pattern matching on both literal values and data types using match expressions. Match expressions have the form:
match &amp;lt;value&amp;gt; | &amp;lt;pattern&amp;gt; = &amp;lt;expression&amp;gt; | &amp;lt;pattern&amp;gt; = &amp;lt;expression&amp;gt; ... ; The rules for pattern matching are:
 value can be a literal or a variable. pattern can be a literal or an instance of a data type (more on this below).  Pattern order also matters: patterns are considered from top to bottom, and the first one that matches the value wins.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/guides/language/overview/</link>
      <pubDate>Fri, 23 Oct 2020 08:43:37 -0400</pubDate>
      
      <guid>/guides/language/overview/</guid>
      <description>A lightweight, fast, embeddable, functional scripting language.  Oba sports a dynamic, but strong type system and a terse syntax which borrows designs from Haskell, Rust, and Go.
import &amp;#34;system&amp;#34; fn fib n = match n | 0 = 0 | 1 = 1 | n = fib(n-1) + fib(n-2) ; system::print(fib(13))   Oba is small. The implementation can be skimmed an in afternoon.
  Oba is functional. Oba aims to make functional programming more accessible by providing a simple, terse syntax which should feel accessible to programmers coming from imperative languages.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>/guides/language/variables/</link>
      <pubDate>Thu, 22 Oct 2020 09:12:08 -0400</pubDate>
      
      <guid>/guides/language/variables/</guid>
      <description>Oba has two kinds of variables: Globals and Locals.
Globals are symbols that are declared in a module&amp;rsquo;s top-level scope. This includes global variables and function names:
// module: foo let x = 1 fn foo { system::print(&amp;#34;foo&amp;#34;) } In the above example, a and foo are both globals.
Locals are variables that are declared in a nested scope, such as function bodies, if-statements, loops, etc.
Visibility Globals are visible to other modules that import the current module:</description>
    </item>
    
    <item>
      <title>Control Flow</title>
      <link>/guides/language/control_flow/</link>
      <pubDate>Thu, 22 Oct 2020 09:12:01 -0400</pubDate>
      
      <guid>/guides/language/control_flow/</guid>
      <description>If statements If-statements are used to branch on values that are true or false:
if true { // Do something. } else { // Do something else. } Notice that an if-statement does not need a following else block.
Loops The while keyword can be used to implement a loop:
import &amp;#34;system&amp;#34; while true { system::print(&amp;#34;looping&amp;#34;) } Conditionals The true in if true is known as the conditional expression. In Oba, the conditional expression must evaluate to either true or false.</description>
    </item>
    
    <item>
      <title>Values</title>
      <link>/guides/language/values/</link>
      <pubDate>Thu, 22 Oct 2020 09:11:50 -0400</pubDate>
      
      <guid>/guides/language/values/</guid>
      <description>Values are built-in object types. They can be created through literals, which are expressions that evaluate to a value. Values are immutable by default.
Booleans There are two boolean literals, true and false.
true false Numbers Oba uses double-precision floating point for all numeric values
0 1234 -1234 3.14159 Functions Functions are first class values in Oba. They can be stored in variables and passed as arguments to other functions.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>/guides/language/functions/</link>
      <pubDate>Thu, 22 Oct 2020 09:11:47 -0400</pubDate>
      
      <guid>/guides/language/functions/</guid>
      <description>Oba supports functions and closures. Functions in Oba are first-class values: they can be stored in variables and passed to other functions as arguments.
Functions in oba are declared using the fn keyword. The first identifier after fn is the function name, and the rest are the function paramters:
fn add a b = a + b A function body may be an expression, or a block-statement. The above code sample is an example of a function with an expression body.</description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>/guides/language/modules/</link>
      <pubDate>Thu, 22 Oct 2020 09:11:40 -0400</pubDate>
      
      <guid>/guides/language/modules/</guid>
      <description>Modules are reusable units Oba code. Modules correspond to individual .oba files and can be used to break programs into smaller pieces.
All of the top-level function declarations and global variables defined in a module are &amp;ldquo;public&amp;rdquo; which means that other modules can import that module and read those symbols.
Imports Modules are included into other modules using the import keyword:
import &amp;#34;system&amp;#34; A module&amp;rsquo;s symbols can be accessed using the :: operator:</description>
    </item>
    
    <item>
      <title>Syntax</title>
      <link>/guides/language/syntax/</link>
      <pubDate>Thu, 22 Oct 2020 09:11:26 -0400</pubDate>
      
      <guid>/guides/language/syntax/</guid>
      <description>Comments Oba has line comments, only, which start with // and end on a newline:
// This is a comment Reserved words debug false let true if else while match fn import Identifiers Identifiers start with an underscore or letter and contain letters, digits, and underscores. Examples:
_i camelCase PascalCase _snake_case alph4num3r1c ALL_CAPS Newlines Oba does not have semicolons, except for in special cases. Instead, newlines (\n) are used to terminate statements:</description>
    </item>
    
  </channel>
</rss>
